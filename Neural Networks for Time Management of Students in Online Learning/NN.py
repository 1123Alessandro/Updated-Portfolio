import random 
import numpy as np
import matplotlib.pyplot as mtp 

C_matrix= [[4, 4, 2, 3],
          [4, 2, 3, 3],
          [2, 2, 2, 3],
          [4, 2, 2, 3],
          [2, 2, 3, 3],
          [2, 1, 2, 3],
          [2, 2, 3, 3],
          [2, 1, 2, 3],
          [2, 2, 2, 3],
          [3, 4, 3, 3],
          [2, 2, 2, 2],
          [2, 4, 3, 2],
          [2, 2, 2, 3],
          [2, 3, 3, 3],
          [3, 4, 3, 3],
          [4, 4, 4, 4],
          [1, 4, 3, 4],
          [4, 3, 2, 4],
          [2, 1, 3, 4],
          [3, 4, 3, 3],
          [2, 2, 2, 3],
          [3, 2, 2, 3],
          [2, 1, 3, 3],
          [3, 3, 4, 4],
          [4, 2, 2, 3],
          [2, 4, 2, 3],
          [5, 2, 3, 3], 
          [2, 2, 3, 4],
          [4, 3, 3, 4],
          [3, 2, 2, 3],
          [2, 4, 2, 4],
          [4, 3, 2, 3],
          [3, 2, 3, 3],
          [3, 2, 2, 3],
          [2, 2, 3, 3],
          [4, 3, 3, 4],
          [4, 3, 3, 3],
          [2, 2, 3, 3],
          [4, 2, 2, 3],
          [2, 3, 2, 3],
          [3, 2, 2, 3], 
          [3, 3, 3, 3],
          [3, 2, 2, 3],
          [2, 1, 2, 4]]

C_final = [3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3]

def C_NN(): 
    w_1 = random.uniform(0, 1) 
    w_2 = random.uniform(0, 1) 
    w_3 = random.uniform(0, 1) 
    w_4 = random.uniform(0, 1) 
    b = random.uniform(0, 1) 
    errors = [] 
    alpha = 0.001 
    for i in range(100000):
        stu = random.randint(0, len(C_matrix)-1)

        N_N = C_matrix[stu][0] * w_1 + C_matrix[stu][1] * w_2 + C_matrix[stu][2] * w_3 + C_matrix[stu][3] * w_4 + b
        cost = np.square(N_N - C_final[stu]) 
        errors.append(cost) 

        dcost_dN_N = 2 * (N_N - C_final[stu])
        dcost_dw_1 = dcost_dN_N * C_matrix[stu][0] 
        dcost_dw_2 = dcost_dN_N * C_matrix[stu][1]
        dcost_dw_3 = dcost_dN_N * C_matrix[stu][2] 
        dcost_dw_4 = dcost_dN_N * C_matrix[stu][3]
        dcost_db = dcost_dN_N * 1

        w_1 = w_1 - alpha * dcost_dw_1
        w_2 = w_2 - alpha * dcost_dw_2 
        w_3 = w_3 - alpha * dcost_dw_3 
        w_4 = w_4 - alpha * dcost_dw_4
        b = b - alpha * dcost_db 
    mtp.plot(errors) 
    mtp.show()
    print("")
    return w_1, w_2, w_3, w_4, b

Cw_1, Cw_2, Cw_3, Cw_4, Cb = C_NN()

S_matrix = [[3, 4, 2, 2],
            [3, 2, 3, 2],
            [2, 2, 2, 3],
            [3, 1, 1, 3],
            [2, 2, 4, 3],
            [3, 2, 3, 4],
            [4, 3, 3, 4],
            [2, 1, 2, 3],
            [3, 1, 3, 3],
            [4, 4, 3, 3],
            [3, 2, 3, 1],
            [3, 4, 3, 4],
            [2, 3, 3, 4],
            [2, 3, 3, 4],
            [3, 4, 3, 3],
            [4, 4, 4, 4],
            [1, 4, 3, 4],
            [2, 2, 2, 4],
            [2, 0.5, 2, 4],
            [3, 4, 3, 3],
            [1, 1, 2, 3],
            [3, 2, 2, 3],
            [2, 1, 3, 3],
            [3, 3, 4, 4],
            [2, 1, 2, 3],
            [2, 4, 3, 3],
            [4, 3, 4, 4],
            [2, 2, 3, 4],
            [4, 3, 3, 4],
            [1, 2, 2, 3],
            [2, 4, 2, 4],
            [3, 3, 2, 4],
            [2, 2, 3, 3],
            [3, 1, 2, 3],
            [2, 2, 3, 3],
            [2, 3, 3, 4],
            [4, 3, 3, 3],
            [2, 3, 3, 3],
            [1, 1, 2, 3],
            [1, 1, 1, 3],
            [1, 1, 2, 3],
            [3, 3, 3, 3],
            [3, 1, 2, 3],
            [2, 1, 2, 4]]

S_final = [2, 2, 3, 3, 3, 3, 3, 4, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 4, 3, 4, 3, 2, 4, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3]